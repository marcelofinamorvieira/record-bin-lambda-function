var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var CanceledPromiseError = /** @class */ (function (_super) {
    __extends(CanceledPromiseError, _super);
    function CanceledPromiseError() {
        var _newTarget = this.constructor;
        var _this = _super.call(this, 'Promise canceled!') || this;
        Object.setPrototypeOf(_this, _newTarget.prototype);
        return _this;
    }
    return CanceledPromiseError;
}(Error));
export { CanceledPromiseError };
export function makeCancelablePromise(promiseOrAsyncFn, onCancel) {
    var cancel = null;
    var cancelable = new Promise(function (resolve, reject) {
        cancel = function () {
            try {
                onCancel();
                reject(new CanceledPromiseError());
            }
            catch (e) {
                reject(e);
            }
        };
        var promise = typeof promiseOrAsyncFn === 'function'
            ? promiseOrAsyncFn()
            : promiseOrAsyncFn;
        promise.then(resolve, reject);
    });
    if (cancel) {
        cancelable.cancel = cancel;
    }
    return cancelable;
}
//# sourceMappingURL=CancelablePromise.js.map