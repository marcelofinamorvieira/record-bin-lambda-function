"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiError = void 0;
function isErrorBody(body) {
    if (typeof body !== 'object' || body === null || !('data' in body)) {
        return false;
    }
    var bodyWithData = body;
    if (!Array.isArray(bodyWithData.data)) {
        return false;
    }
    var bodyWithDataList = bodyWithData;
    if (bodyWithDataList.data.length === 0) {
        return false;
    }
    var firstEl = bodyWithDataList.data[0];
    if (typeof firstEl !== 'object' ||
        firstEl === null ||
        !('id' in firstEl) ||
        !('type' in firstEl) ||
        !('attributes' in firstEl) ||
        firstEl.type !== 'api_error') {
        return false;
    }
    return true;
}
var humanMessageForCode = {
    BATCH_DATA_VALIDATION_IN_PROGRESS: "The schema of this model changed, we're re-running validations over every record in background. Please retry with this operation in a few seconds!",
    INSUFFICIENT_PERMISSIONS: "Your role does not permit this action",
    MAINTENANCE_MODE: "The project is currently in maintenance mode!",
    DELETE_RESTRICTION: "Sorry, but you cannot delete this resource, as it's currently used/referenced elsewhere!",
    INVALID_CREDENTIALS: "Credentials are incorrect!",
    INVALID_EMAIL: "Email address is incorrect!",
    INVALID_FORMAT: "The format of the parameters passed is incorrect, take a look at the details of the error to know what's wrong!",
    ITEM_LOCKED: "The operation cannot be completed as some other user is currently editing this record!",
    LINKED_FROM_PUBLISHED_ITEMS: "Couldn't unpublish the record, as some published records are linked to it!",
    PLAN_UPGRADE_REQUIRED: "Cannot proceed, please upgrade plan!",
    PUBLISHED_CHILDREN: "Couldn't unpublish the record, some children records are still published!",
    REQUIRED_2FA_SETUP: "This project requires every user to turn on 2-factor authentication! Please go to your Dashboard and activate it! (https://dashboard.datocms.com/account/setup-2fa)",
    REQUIRED_BY_ASSOCIATION: "Cannot delete the record, as it's required by other records:",
    STALE_ITEM_VERSION: "Someone else made a change while you were editing this record, please refresh the page!",
    TITLE_ALREADY_PRESENT: "There can only be one Title field per model",
    UNPUBLISHED_LINK: "Couldn't publish the record, as it links some unpublished records!",
    UNPUBLISHED_PARENT: "Couldn't publish the record, as the parent record is not published!",
    UPLOAD_IS_CURRENTLY_IN_USE: "Couldn't delete this asset, as it's currently used by some records!",
    UPLOAD_NOT_PASSING_FIELD_VALIDATIONS: "Couldn't update this asset since some records are failing to pass the validations!",
};
var humanMessageForPlanUpgradeLimit = {
    build_triggers: "You've reached the maximum number of build triggers your plan allows",
    sandbox_environments: "You've reached the maximum number of environments your plan allows",
    item_types: "You've reached the maximum number of models your plan allows to create",
    items: "You've reached the maximum number of records your plan allows to create",
    locales: "You've reached the maximum number of locales your plan allows",
    mux_encoding_seconds: "You've reached the maximum video encoding limits of your plan",
    otp: "Two-factor authentication cannot be on the current plan",
    plugins: "You've reached the maximum number of plugins your plan allows",
    roles: "You've reached the maximum number of roles your plan allows to create",
    uploadable_bytes: "You've reached the file storage limits of your plan",
    users: "You've reached the maximum number of collaborators your plan allows to invite to the project",
    access_tokens: "You've reached the maximum number of API tokens your plan allows to create",
};
var ApiError = /** @class */ (function (_super) {
    __extends(ApiError, _super);
    function ApiError(initObject) {
        var _newTarget = this.constructor;
        var _this = _super.call(this, 'API Error!') || this;
        Object.setPrototypeOf(_this, _newTarget.prototype);
        if ('captureStackTrace' in Error) {
            Error.captureStackTrace(_this, ApiError);
        }
        else {
            _this.stack = new Error().stack;
        }
        _this.request = initObject.request;
        _this.response = initObject.response;
        _this.preCallStack = initObject.preCallStack;
        var message = "".concat(initObject.request.method, " ").concat(initObject.request.url, ": ").concat(_this.response.status, " ").concat(_this.response.statusText);
        if (_this.errors.length > 0) {
            message += "\n\n".concat(JSON.stringify(_this.errors, null, 2));
        }
        _this.message = message;
        if (_this.preCallStack) {
            _this.stack += "\nCaused By:\n".concat(_this.preCallStack);
        }
        return _this;
    }
    Object.defineProperty(ApiError.prototype, "errors", {
        get: function () {
            if (!isErrorBody(this.response.body)) {
                return [];
            }
            return this.response.body.data;
        },
        enumerable: false,
        configurable: true
    });
    ApiError.prototype.findError = function (codeOrCodes, filterDetails) {
        var codes = Array.isArray(codeOrCodes) ? codeOrCodes : [codeOrCodes];
        return this.errors.find(function (error) {
            return codes.includes(error.attributes.code) &&
                (!filterDetails ||
                    (typeof filterDetails === 'function'
                        ? filterDetails(error.attributes.details)
                        : Object.entries(filterDetails).every(function (_a) {
                            var key = _a[0], value = _a[1];
                            return error.attributes.details[key] === value;
                        })));
        });
    };
    Object.defineProperty(ApiError.prototype, "humanMessage", {
        get: function () {
            var _this = this;
            var planUpgradeError = this.findError('PLAN_UPGRADE_REQUIRED');
            if (planUpgradeError) {
                var limit = planUpgradeError.attributes.details.limit;
                return "".concat(humanMessageForPlanUpgradeLimit[limit], ". Please head over to your account dashboard (https://dashboard.datocms.com/) to upgrade the plan or, if no publicly available plan suits your needs, contact our Sales team (https://www.datocms.com/contact) to get a custom quote!");
            }
            var errors = Object.keys(humanMessageForCode)
                .filter(function (code) { return _this.findError(code); })
                .map(function (code) { return humanMessageForCode[code]; });
            if (errors.length === 0) {
                return null;
            }
            return errors.join('\n');
        },
        enumerable: false,
        configurable: true
    });
    return ApiError;
}(Error));
exports.ApiError = ApiError;
//# sourceMappingURL=ApiError.js.map