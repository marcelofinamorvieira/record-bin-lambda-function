var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as Utils from '@datocms/rest-client-utils';
import BaseResource from '../../BaseResource';
var Field = /** @class */ (function (_super) {
    __extends(Field, _super);
    function Field() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a new field
     *
     * Read more: https://www.datocms.com/docs/content-management-api/resources/field/create
     */
    Field.prototype.create = function (itemTypeId, body) {
        return this.rawCreate(Utils.toId(itemTypeId), Utils.serializeRequestBody(body, {
            type: 'field',
            attributes: [
                'label',
                'field_type',
                'api_key',
                'localized',
                'validators',
                'appeareance',
                'appearance',
                'position',
                'hint',
                'default_value',
            ],
            relationships: ['fieldset'],
        })).then(function (body) {
            return Utils.deserializeResponseBody(body);
        });
    };
    /**
     * Create a new field
     *
     * Read more: https://www.datocms.com/docs/content-management-api/resources/field/create
     */
    Field.prototype.rawCreate = function (itemTypeId, body) {
        return this.client.request({
            method: 'POST',
            url: "/item-types/".concat(itemTypeId, "/fields"),
            body: body,
        });
    };
    /**
     * Update a field
     *
     * Read more: https://www.datocms.com/docs/content-management-api/resources/field/update
     */
    Field.prototype.update = function (fieldId, body) {
        return this.rawUpdate(Utils.toId(fieldId), Utils.serializeRequestBody(body, {
            id: Utils.toId(fieldId),
            type: 'field',
            attributes: [
                'default_value',
                'label',
                'api_key',
                'localized',
                'validators',
                'appeareance',
                'appearance',
                'position',
                'field_type',
                'hint',
            ],
            relationships: ['fieldset'],
        })).then(function (body) {
            return Utils.deserializeResponseBody(body);
        });
    };
    /**
     * Update a field
     *
     * Read more: https://www.datocms.com/docs/content-management-api/resources/field/update
     */
    Field.prototype.rawUpdate = function (fieldId, body) {
        return this.client.request({
            method: 'PUT',
            url: "/fields/".concat(fieldId),
            body: body,
        });
    };
    /**
     * List all fields
     *
     * Read more: https://www.datocms.com/docs/content-management-api/resources/field/instances
     */
    Field.prototype.list = function (itemTypeId) {
        return this.rawList(Utils.toId(itemTypeId)).then(function (body) {
            return Utils.deserializeResponseBody(body);
        });
    };
    /**
     * List all fields
     *
     * Read more: https://www.datocms.com/docs/content-management-api/resources/field/instances
     */
    Field.prototype.rawList = function (itemTypeId) {
        return this.client.request({
            method: 'GET',
            url: "/item-types/".concat(itemTypeId, "/fields"),
        });
    };
    /**
     * List referenced fields
     *
     * Read more: https://www.datocms.com/docs/content-management-api/resources/field/referencing
     *
     * @deprecated This API call is to be considered private and might change without notice
     */
    Field.prototype.referencing = function (itemTypeId) {
        return this.rawReferencing(Utils.toId(itemTypeId)).then(function (body) {
            return Utils.deserializeResponseBody(body);
        });
    };
    /**
     * List referenced fields
     *
     * Read more: https://www.datocms.com/docs/content-management-api/resources/field/referencing
     *
     * @deprecated This API call is to be considered private and might change without notice
     */
    Field.prototype.rawReferencing = function (itemTypeId) {
        return this.client.request({
            method: 'GET',
            url: "/item-types/".concat(itemTypeId, "/fields/referencing"),
        });
    };
    /**
     * List related fields
     *
     * Read more: https://www.datocms.com/docs/content-management-api/resources/field/related
     *
     * @deprecated This API call is to be considered private and might change without notice
     */
    Field.prototype.related = function (itemTypeId) {
        return this.rawRelated(Utils.toId(itemTypeId)).then(function (body) {
            return Utils.deserializeResponseBody(body);
        });
    };
    /**
     * List related fields
     *
     * Read more: https://www.datocms.com/docs/content-management-api/resources/field/related
     *
     * @deprecated This API call is to be considered private and might change without notice
     */
    Field.prototype.rawRelated = function (itemTypeId) {
        return this.client.request({
            method: 'GET',
            url: "/item-types/".concat(itemTypeId, "/fields/related"),
        });
    };
    /**
     * Retrieve a field
     *
     * Read more: https://www.datocms.com/docs/content-management-api/resources/field/self
     */
    Field.prototype.find = function (fieldId) {
        return this.rawFind(Utils.toId(fieldId)).then(function (body) {
            return Utils.deserializeResponseBody(body);
        });
    };
    /**
     * Retrieve a field
     *
     * Read more: https://www.datocms.com/docs/content-management-api/resources/field/self
     */
    Field.prototype.rawFind = function (fieldId) {
        return this.client.request({
            method: 'GET',
            url: "/fields/".concat(fieldId),
        });
    };
    /**
     * Delete a field
     *
     * Read more: https://www.datocms.com/docs/content-management-api/resources/field/destroy
     */
    Field.prototype.destroy = function (fieldId) {
        return this.rawDestroy(Utils.toId(fieldId)).then(function (body) {
            return Utils.deserializeResponseBody(body);
        });
    };
    /**
     * Delete a field
     *
     * Read more: https://www.datocms.com/docs/content-management-api/resources/field/destroy
     */
    Field.prototype.rawDestroy = function (fieldId) {
        return this.client.request({
            method: 'DELETE',
            url: "/fields/".concat(fieldId),
        });
    };
    /**
     * Duplicate a field
     *
     * Read more: https://www.datocms.com/docs/content-management-api/resources/field/duplicate
     */
    Field.prototype.duplicate = function (fieldId) {
        return this.rawDuplicate(Utils.toId(fieldId)).then(function (body) {
            return Utils.deserializeResponseBody(body);
        });
    };
    /**
     * Duplicate a field
     *
     * Read more: https://www.datocms.com/docs/content-management-api/resources/field/duplicate
     */
    Field.prototype.rawDuplicate = function (fieldId) {
        return this.client.request({
            method: 'POST',
            url: "/fields/".concat(fieldId, "/duplicate"),
        });
    };
    Field.TYPE = 'field';
    return Field;
}(BaseResource));
export default Field;
//# sourceMappingURL=Field.js.map