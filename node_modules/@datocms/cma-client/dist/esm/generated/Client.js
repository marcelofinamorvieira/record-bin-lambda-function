var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import * as Resources from './resources';
import { request, pollJobResult } from '@datocms/rest-client-utils';
var Client = /** @class */ (function () {
    function Client(config) {
        this.config = config;
        this.roles = new Resources.Role(this);
        this.users = new Resources.User(this);
        this.ssoUsers = new Resources.SsoUser(this);
        this.auditLogEvents = new Resources.AuditLogEvent(this);
        this.menuItems = new Resources.MenuItem(this);
        this.itemTypes = new Resources.ItemType(this);
        this.fields = new Resources.Field(this);
        this.fieldsets = new Resources.Fieldset(this);
        this.session = new Resources.Session(this);
        this.accessTokens = new Resources.AccessToken(this);
        this.plugins = new Resources.Plugin(this);
        this.jobResults = new Resources.JobResult(this);
        this.subscriptionLimits = new Resources.SubscriptionLimit(this);
        this.subscriptionFeatures = new Resources.SubscriptionFeature(this);
        this.buildEvents = new Resources.BuildEvent(this);
        this.items = new Resources.Item(this);
        this.itemVersions = new Resources.ItemVersion(this);
        this.uploads = new Resources.Upload(this);
        this.uploadRequest = new Resources.UploadRequest(this);
        this.scheduledPublication = new Resources.ScheduledPublication(this);
        this.scheduledUnpublishing = new Resources.ScheduledUnpublishing(this);
        this.searchResults = new Resources.SearchResult(this);
        this.environments = new Resources.Environment(this);
        this.maintenanceMode = new Resources.MaintenanceMode(this);
        this.webhooks = new Resources.Webhook(this);
        this.webhookCalls = new Resources.WebhookCall(this);
        this.buildTriggers = new Resources.BuildTrigger(this);
        this.itemTypeFilters = new Resources.ItemTypeFilter(this);
        this.uploadFilters = new Resources.UploadFilter(this);
        this.siteInvitations = new Resources.SiteInvitation(this);
        this.editingSessions = new Resources.EditingSession(this);
        this.ssoGroups = new Resources.SsoGroup(this);
        this.ssoSettings = new Resources.SsoSettings(this);
        this.whiteLabelSettings = new Resources.WhiteLabelSettings(this);
        this.publicInfo = new Resources.PublicInfo(this);
        this.dailyUsages = new Resources.DailyUsage(this);
        this.usageCounters = new Resources.UsageCounter(this);
        this.uploadTags = new Resources.UploadTag(this);
        this.uploadSmartTags = new Resources.UploadSmartTag(this);
        this.site = new Resources.Site(this);
        this.workflows = new Resources.Workflow(this);
    }
    Object.defineProperty(Client.prototype, "baseUrl", {
        get: function () {
            return this.config.baseUrl || Client.defaultBaseUrl;
        },
        enumerable: false,
        configurable: true
    });
    Client.prototype.request = function (options) {
        var _this = this;
        return request(__assign(__assign(__assign({}, this.config), options), { logFn: this.config.logFn || console.log, userAgent: "@datocms/cma-client", baseUrl: this.baseUrl, preCallStack: new Error().stack, extraHeaders: __assign(__assign(__assign({}, (this.config.extraHeaders || {})), (this.config.environment
                ? { 'X-Environment': this.config.environment }
                : {})), { 'X-API-Version': '3' }), fetchJobResult: function (jobId) {
                return _this.jobResultsFetcher
                    ? _this.jobResultsFetcher(jobId)
                    : pollJobResult(function () { return _this.jobResults.find(jobId); });
            } }));
    };
    Client.prototype.eventsChannelName = function () {
        return __awaiter(this, void 0, void 0, function () {
            var site;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.cachedEventsChannelName) {
                            return [2 /*return*/, this.cachedEventsChannelName];
                        }
                        return [4 /*yield*/, this.site.rawFind()];
                    case 1:
                        site = (_a.sent()).data;
                        this.cachedEventsChannelName = this.config.environment
                            ? "private-site-".concat(site.id, "-environment-").concat(this.config.environment)
                            : "private-site-".concat(site.id);
                        return [2 /*return*/, this.cachedEventsChannelName];
                }
            });
        });
    };
    Client.defaultBaseUrl = 'https://site-api.datocms.com';
    return Client;
}());
export { Client };
//# sourceMappingURL=Client.js.map