var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import got, { CancelError } from 'got';
import { createReadStream, promises } from 'fs';
import mime from 'mime-types';
import { CanceledPromiseError, } from '@datocms/rest-client-utils';
import { makeCancelablePromise } from '@datocms/rest-client-utils';
export function uploadLocalFileToS3(filePath, url, { onProgress } = {}) {
    let isCanceled = false;
    let putPromise;
    return makeCancelablePromise(() => __awaiter(this, void 0, void 0, function* () {
        if (isCanceled) {
            throw new CanceledPromiseError();
        }
        const { size: totalLength } = yield promises.stat(filePath);
        if (isCanceled) {
            throw new CanceledPromiseError();
        }
        try {
            putPromise = got.put(url, {
                headers: {
                    'Content-Type': mime.lookup(filePath) || 'application/octet-stream',
                    'Content-Length': `${totalLength}`,
                },
                responseType: 'json',
                body: createReadStream(filePath),
            });
        }
        catch (e) {
            if (e instanceof CancelError) {
                throw new CanceledPromiseError();
            }
            else {
                throw e;
            }
        }
        if (onProgress) {
            putPromise.on('uploadProgress', ({ percent }) => {
                if (!isCanceled) {
                    onProgress({
                        type: 'UPLOADING_FILE',
                        payload: { progress: Math.round(percent * 100) },
                    });
                }
            });
        }
        yield putPromise;
    }), () => {
        isCanceled = true;
        if (putPromise) {
            putPromise.cancel();
        }
    });
}
//# sourceMappingURL=uploadLocalFileToS3.js.map