var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { Resources } from '@datocms/cma-client';
import { uploadLocalFileAndReturnPath, } from './utils/uploadLocalFileAndReturnPath';
import { CanceledPromiseError, } from '@datocms/rest-client-utils';
import { makeCancelablePromise } from '@datocms/rest-client-utils';
import { downloadFile } from './utils/downloadFile';
import md5 from './utils/md5';
export class UploadResource extends Resources.Upload {
    /**
     * Create a new upload from a local file path
     *
     * Read more: https://www.datocms.com/docs/content-management-api/resources/upload/create
     */
    createFromLocalFile(body) {
        let isCanceledBeforeUpload = false;
        let runningPromise;
        return makeCancelablePromise(() => __awaiter(this, void 0, void 0, function* () {
            if (isCanceledBeforeUpload) {
                throw new CanceledPromiseError();
            }
            const { localPath, filename, onProgress, skipCreationIfAlreadyExists } = body, other = __rest(body, ["localPath", "filename", "onProgress", "skipCreationIfAlreadyExists"]);
            if (skipCreationIfAlreadyExists) {
                const checksum = yield md5(localPath);
                if (isCanceledBeforeUpload) {
                    throw new CanceledPromiseError();
                }
                const existingUploads = yield this.list({
                    filter: { fields: { md5: { eq: checksum } } },
                });
                if (isCanceledBeforeUpload) {
                    throw new CanceledPromiseError();
                }
                if (existingUploads.length > 0) {
                    return existingUploads[0];
                }
            }
            runningPromise = uploadLocalFileAndReturnPath(this.client, localPath, {
                filename,
                onProgress,
            });
            const path = yield runningPromise;
            if (onProgress) {
                onProgress({ type: 'CREATING_UPLOAD_OBJECT' });
            }
            return yield this.create(Object.assign(Object.assign({}, other), { path }));
        }), () => {
            if (runningPromise) {
                runningPromise.cancel();
            }
            else {
                isCanceledBeforeUpload = true;
            }
        });
    }
    /**
     * Create a new upload from a remote URL
     *
     * Read more: https://www.datocms.com/docs/content-management-api/resources/upload/create
     */
    createFromUrl(body) {
        let isCanceled = false;
        let downloadPromise;
        let runningPromise;
        return makeCancelablePromise(() => __awaiter(this, void 0, void 0, function* () {
            if (isCanceled) {
                throw new CanceledPromiseError();
            }
            const { url, onProgress } = body, other = __rest(body, ["url", "onProgress"]);
            downloadPromise = downloadFile(url, { onProgress });
            const { filePath, deleteFile } = yield downloadPromise;
            try {
                if (isCanceled) {
                    throw new CanceledPromiseError();
                }
                runningPromise = this.createFromLocalFile(Object.assign({ localPath: filePath, onProgress }, other));
                const result = yield runningPromise;
                if (isCanceled) {
                    throw new CanceledPromiseError();
                }
                return result;
            }
            catch (e) {
                yield deleteFile();
                throw e;
            }
        }), () => {
            isCanceled = true;
            if (downloadPromise) {
                downloadPromise.cancel();
            }
            if (runningPromise) {
                runningPromise.cancel();
            }
        });
    }
}
//# sourceMappingURL=UploadResource.js.map