"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.uploadLocalFileAndReturnPath = void 0;
const rest_client_utils_1 = require("@datocms/rest-client-utils");
const rest_client_utils_2 = require("@datocms/rest-client-utils");
const path_1 = require("path");
const uploadLocalFileToS3_1 = require("./uploadLocalFileToS3");
function uploadLocalFileAndReturnPath(client, localPath, options = {}) {
    const filename = options.filename || (0, path_1.basename)(localPath);
    let isCanceledBeforeUpload = false;
    let uploadPromise = undefined;
    return (0, rest_client_utils_1.makeCancelablePromise)(() => __awaiter(this, void 0, void 0, function* () {
        if (options.onProgress) {
            options.onProgress({
                type: 'REQUESTING_UPLOAD_URL',
                payload: { filename },
            });
        }
        const { id, url } = yield client.uploadRequest.create({ filename });
        if (isCanceledBeforeUpload) {
            throw new rest_client_utils_2.CanceledPromiseError();
        }
        if (options.onProgress) {
            options.onProgress({
                type: 'UPLOADING_FILE',
                payload: {
                    progress: 0,
                },
            });
        }
        uploadPromise = (0, uploadLocalFileToS3_1.uploadLocalFileToS3)(localPath, url, options);
        yield uploadPromise;
        return id;
    }), () => {
        if (uploadPromise) {
            uploadPromise.cancel();
        }
        else {
            isCanceledBeforeUpload = true;
        }
    });
}
exports.uploadLocalFileAndReturnPath = uploadLocalFileAndReturnPath;
//# sourceMappingURL=uploadLocalFileAndReturnPath.js.map