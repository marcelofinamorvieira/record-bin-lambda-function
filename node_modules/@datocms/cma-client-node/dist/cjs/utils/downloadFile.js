"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.downloadFile = void 0;
const tmp_promise_1 = require("tmp-promise");
const got_1 = __importStar(require("got"));
const fs_1 = require("fs");
const path_1 = require("path");
const url_1 = require("url");
const rest_client_utils_1 = require("@datocms/rest-client-utils");
function downloadFile(url, { onProgress } = {}) {
    let isCancelled = false;
    let requestPromise;
    return (0, rest_client_utils_1.makeCancelablePromise)(() => __awaiter(this, void 0, void 0, function* () {
        if (isCancelled) {
            throw new rest_client_utils_1.CanceledPromiseError();
        }
        const { path: tmpDir, cleanup: deleteTmpDir } = yield (0, tmp_promise_1.dir)({
            unsafeCleanup: true,
        });
        if (isCancelled) {
            yield deleteTmpDir();
            throw new rest_client_utils_1.CanceledPromiseError();
        }
        try {
            requestPromise = (0, got_1.default)(url, { responseType: 'buffer', maxRedirects: 10 });
            if (onProgress) {
                requestPromise.on('downloadProgress', ({ percent }) => {
                    if (isCancelled) {
                        return;
                    }
                    onProgress({
                        type: 'DOWNLOADING_FILE',
                        payload: { url, progress: Math.round(percent * 100) },
                    });
                });
            }
            let response;
            try {
                response = yield requestPromise;
            }
            catch (e) {
                if (e instanceof got_1.CancelError) {
                    throw new rest_client_utils_1.CanceledPromiseError();
                }
                else {
                    throw e;
                }
            }
            if (isCancelled) {
                throw new rest_client_utils_1.CanceledPromiseError();
            }
            const filePath = (0, path_1.join)(tmpDir, (0, path_1.basename)(new url_1.URL(url).pathname));
            yield fs_1.promises.writeFile(filePath, response.body);
            return {
                filePath,
                deleteFile: deleteTmpDir,
            };
        }
        catch (e) {
            deleteTmpDir();
            throw e;
        }
    }), () => {
        isCancelled = true;
        if (requestPromise) {
            requestPromise.cancel();
        }
    });
}
exports.downloadFile = downloadFile;
//# sourceMappingURL=downloadFile.js.map